https://leetcode.com/problems/powx-n/

class Solution {
public:
    double myPow(double x, int n) {
        // APPROACH 1:  using inbuilt function
        // return (double)pow(x,n);
        
        //APPROACH 2: using recurssion
        //base case as anything to power 0 will give 1
        /*eg:
        x = 2 , n = -4
        1/2^4 -> 1/2*2*2*2 => 1/16 => 0.6250 ans
        solving using recurssion
        1st call 
        -4<0{
         n = abs(-4) => n = 4
         x = 1/2
        }
        2nd call
        4%2 == 0{
        mypow(1/2 * 1/2, 4/2)=> mypow(1/4,2)
        }
        now n = 2
        3rd call
        2%2 == 0{
        mypow(1/4 * 1/4, 2/2)=> mypow(1/16, 1)
        }
        4th call
        return 1/16*mypow(1/16,0)=> 1/16*1 = 1/16
        */
         
        if(n==0)return 1;
        if(n<0) {
            n = abs(n);
            x = 1/x;
        }
        if(n%2==0){
            return myPow(x*x, n/2);
        }
        else{
            return x*myPow(x, n-1);
        }
    }
};
